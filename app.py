import os
import telebot
from telebot import types
from flask import Flask, request
from datetime import datetime
import pytz

# –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ Markdown
def escape_md(text):
    # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–≥–ª–∞—Å–Ω–æ Telegram Markdown
    escape_chars = r'\_*[]()~`>#+-=|{}.!'
    for ch in escape_chars:
        text = text.replace(ch, f"\\{ch}")
    return text

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('BOT_TOKEN')
bot = telebot.TeleBot(TOKEN)

# –°–æ–∑–¥–∞—ë–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# ADMIN ID (–≤–∞—à ID)
ADMIN_CHAT_ID = 479938867  # –í–∞—à ID

# –°–ø–∏—Å–∫–∏ chat_id –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Ç–∏ –∏ –≥–æ—Ä–æ–¥–∞
chat_ids_mk = {
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": -1002210043742,
    "–ß–µ–ª—è–±–∏–Ω—Å–∫": -1002238514762,
    "–ü–µ—Ä–º—å": -1002205127231,
    "–ò–∂–µ–≤—Å–∫": -1001604781452,
    "–ö–∞–∑–∞–Ω—å": -1002228881675,
    "–û—Ä–µ–Ω–±—É—Ä–≥": -1002255568202,
    "–£—Ñ–∞": -1002196469365,
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": -1002235645677,
    "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫": -1002248474008,
    "–ë–∞—Ä–Ω–∞—É–ª": -1002234471215,
    "–°–∞—Ä–∞–Ω—Å–∫": -1002426762134,
    "–û–º—Å–∫": -1002151258573,
    "–°–∞—Ä–∞—Ç–æ–≤": -1002426762134,
    "–í–æ—Ä–æ–Ω–µ–∂": -1002207503508,
    "–°–∞–º–∞—Ä–∞": -1001852671383,
    "–í–æ–ª–≥–æ–≥—Ä–∞–¥": -1002426762134,
    "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥": -1002426762134,
    "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥": -1002217056197,
    "–ò—Ä–∫—É—Ç—Å–∫": -1002210419274,
    "–ö–µ–º–µ—Ä–æ–≤–æ": -1002426762134,
    "–ú–æ—Å–∫–≤–∞": -1002208434096,
    "–°–∞–Ω–∫—Ç –ü–µ—Ç–µ—Ä–±—É—Ä–≥": -1002248474008,
    "–û–±—â–∞—è –≥—Ä—É–ø–ø–∞ –Æ–≥–∞": -1002161346845,
    "–û–±—â–∞—è –≥—Ä—É–ø–ø–∞ –î–∞–ª—å–Ω–µ–≥–æ –í–æ—Å—Ç–æ–∫–∞": -1002210419274,
    "–û–±—â–∞—è –≥—Ä—É–ø–ø–∞ –¢—é–º–µ–Ω—å –∏ –°–µ–≤–µ—Ä": -1002210623988,
    "–¢–µ—Å—Ç–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ üõ†Ô∏è": -1002426733876
}

chat_ids_parni = {
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": -1002413948841,
    "–¢—é–º–µ–Ω—å": -1002255622479,
    "–û–º—Å–∫": -1002274367832,
    "–ß–µ–ª—è–±–∏–Ω—Å–∫": -1002406302365,
    "–ü–µ—Ä–º–∏": -1002280860973,
    "–ö—É—Ä–≥–∞–Ω": -1002469285352,
    "–•–ú–ê–û": -1002287709568,
    "–£—Ñ–∞": -1002448909000,
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": -1002261777025,  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π ID –¥–ª—è –≥—Ä—É–ø–ø—ã "–ü–∞—Ä–Ω–∏ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"
    "–Ø–ú–ê–û": -1002371438340
}

# ID VIP-—á–∞—Ç–∞ "Elite Lounge"
VIP_CHAT_ID = -1002446486648  # –í–∞—à VIP-—á–∞—Ç

# –°—Å—ã–ª–∫–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –æ–ø–ª–∞—Ç—ã
VERIFICATION_LINK = "http://t.me/vip_znakbot"  # –°—Å—ã–ª–∫–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_posts = {}

# –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
def get_main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
    return markup

# –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ (–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥)
def format_time(timestamp):
    tz = pytz.timezone('Asia/Yekaterinburg')
    local_time = timestamp.astimezone(tz)
    return local_time.strftime("%H:%M, %d %B %Y")  # –ú–µ—Å—è—Ü –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º

# –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º Markdown
def get_user_name(user):
    name = escape_md(user.first_name)
    if user.username:
        return f"[{name}](https://t.me/{user.username})"
    else:
        return f"[{name}](tg://user?id={user.id})"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    try:
        # –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        if message.chat.type != "private":
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –õ–° –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if message.chat.id not in user_posts:
            user_posts[message.chat.id] = []

        bot.send_message(
            message.chat.id,
            "–ü—Ä–∏–≤–µ—Ç! –Ø ElitePoster. üëã\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        bot.send_message(ADMIN_CHAT_ID, f"–û—à–∏–±–∫–∞ –≤ /start: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
@bot.message_handler(func=lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
def create_new_post(message):
    if message.chat.type != "private":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –õ–° –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
        return
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(message, process_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
def handle_delete_post(message):
    if message.chat.type != "private":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –õ–° –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
        return
    if message.chat.id in user_posts and user_posts[message.chat.id]:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        for post in user_posts[message.chat.id]:
            time_formatted = format_time(post["time"])
            button_text = f"–£–¥–∞–ª–∏—Ç—å: {time_formatted}, {post['city']}, {post['network']}"
            markup.add(button_text)
        markup.add("–û—Ç–º–µ–Ω–∞")
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
        bot.register_next_step_handler(message, process_delete_choice)
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"
@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
def handle_delete_all_posts(message):
    if message.chat.type != "private":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –õ–° –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
        return
    if message.chat.id in user_posts and user_posts[message.chat.id]:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add("–î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å—ë", "–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å")
        bot.send_message(message.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è?", reply_markup=markup)
        bot.register_next_step_handler(message, process_delete_all_choice)
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
def process_delete_choice(message):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard())
    else:
        try:
            for post in user_posts[message.chat.id]:
                time_formatted = format_time(post["time"])
                if message.text == f"–£–¥–∞–ª–∏—Ç—å: {time_formatted}, {post['city']}, {post['network']}":
                    try:
                        bot.delete_message(post["chat_id"], post["message_id"])
                    except Exception:
                        pass
                    user_posts[message.chat.id].remove(post)
                    bot.send_message(message.chat.id, "‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.", reply_markup=get_main_keyboard())
                    return
            bot.send_message(message.chat.id, "‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        except (ValueError, IndexError):
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
def process_delete_all_choice(message):
    if message.text == "–î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å—ë":
        for post in user_posts[message.chat.id]:
            try:
                bot.delete_message(post["chat_id"], post["message_id"])
            except Exception:
                pass
        user_posts[message.chat.id] = []
        bot.send_message(message.chat.id, "‚úÖ –í—Å–µ –≤–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.", reply_markup=get_main_keyboard())
    else:
        bot.send_message(message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
def process_text(message):
    if message.text == "–ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
        return

    if message.photo or message.video:
        if message.photo:
            media_type = "photo"
            file_id = message.photo[-1].file_id
            text = message.caption if message.caption else ""
        elif message.video:
            media_type = "video"
            file_id = message.video.file_id
            text = message.caption if message.caption else ""
    elif message.text:
        media_type = None
        file_id = None
        text = message.text
    else:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.")
        bot.register_next_step_handler(message, process_text)
        return

    confirm_text(message, text, media_type, file_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
def confirm_text(message, text, media_type=None, file_id=None):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("–î–∞", "–ù–µ—Ç")
    bot.send_message(message.chat.id, f"–í–∞—à —Ç–µ–∫—Å—Ç:\n{text}\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?", reply_markup=markup)
    bot.register_next_step_handler(message, handle_confirmation, text, media_type, file_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
def handle_confirmation(message, text, media_type, file_id):
    if message.text.lower() == "–¥–∞":
        bot.send_message(message.chat.id, "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", reply_markup=get_network_markup())
        bot.register_next_step_handler(message, select_network, text, media_type, file_id)
    elif message.text.lower() == "–Ω–µ—Ç":
        bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ:")
        bot.register_next_step_handler(message, process_text)
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
        bot.register_next_step_handler(message, handle_confirmation, text, media_type, file_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∏
def get_network_markup():
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("–ú—É–∂—Å–∫–æ–π –ö–ª—É–±", "–ü–ê–†–ù–ò 18+", "–û–±–µ —Å–µ—Ç–∏", "–ù–∞–∑–∞–¥")
    return markup

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∏
def select_network(message, text, media_type, file_id):
    if message.text == "–ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
        bot.register_next_step_handler(message, process_text)
        return

    selected_network = message.text
    if selected_network in ["–ú—É–∂—Å–∫–æ–π –ö–ª—É–±", "–ü–ê–†–ù–ò 18+", "–û–±–µ —Å–µ—Ç–∏"]:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True, row_width=2)
        cities = chat_ids_mk.keys() if selected_network == "–ú—É–∂—Å–∫–æ–π –ö–ª—É–±" else \
                 chat_ids_parni.keys() if selected_network == "–ü–ê–†–ù–ò 18+" else \
                 list(chat_ids_mk.keys()) + list(chat_ids_parni.keys())
        for city in cities:
            markup.add(city)
        markup.add("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Å–µ—Ç—å", "–ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, "üìç –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Å–µ—Ç—å':", reply_markup=markup)
        bot.register_next_step_handler(message, select_city_and_publish, text, selected_network, media_type, file_id)
    else:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞! –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å–µ—Ç—å.")
        bot.register_next_step_handler(message, process_text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
def select_city_and_publish(message, text, selected_network, media_type, file_id):
    if message.text == "–ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", reply_markup=get_network_markup())
        bot.register_next_step_handler(message, select_network, text, media_type, file_id)
        return

    city = message.text
    if city == "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Å–µ—Ç—å":
        bot.send_message(message.chat.id, "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", reply_markup=get_network_markup())
        bot.register_next_step_handler(message, select_network, text, media_type, file_id)
    else:
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ VIP-—É—á–∞—Å—Ç–Ω–∏–∫–∞
            chat_member = bot.get_chat_member(VIP_CHAT_ID, message.from_user.id)
            if chat_member.status in ["member", "administrator", "creator"]:
                vip_tag = "\n\n‚≠êÔ∏è –ü—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ ‚≠êÔ∏è"
                user_name = get_user_name(message.from_user)
                full_text = f"üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç {user_name}:\n\n{escape_md(text)}{vip_tag}"
                if selected_network == "–û–±–µ —Å–µ—Ç–∏":
                    networks = ["–ú—É–∂—Å–∫–æ–π –ö–ª—É–±", "–ü–ê–†–ù–ò 18+"]
                else:
                    networks = [selected_network]

                for network in networks:
                    chat_dict = chat_ids_mk if network == "–ú—É–∂—Å–∫–æ–π –ö–ª—É–±" else chat_ids_parni
                    if city in chat_dict:
                        chat_id = chat_dict[city]
                        try:
                            if media_type == "photo":
                                sent_message = bot.send_photo(chat_id, file_id, caption=full_text, parse_mode="Markdown")
                            elif media_type == "video":
                                sent_message = bot.send_video(chat_id, file_id, caption=full_text, parse_mode="Markdown")
                            else:
                                sent_message = bot.send_message(chat_id, full_text, parse_mode="Markdown")
                            if message.chat.id not in user_posts:
                                user_posts[message.chat.id] = []
                            user_posts[message.chat.id].append({
                                "message_id": sent_message.message_id,
                                "chat_id": chat_id,
                                "time": datetime.now(),  # –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                                "city": city,
                                "network": network
                            })
                            bot.send_message(message.chat.id, f"‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ —Å–µ—Ç–∏ ¬´{network}¬ª, –≥–æ—Ä–æ–¥–µ {city}.")
                        except telebot.apihelper.ApiTelegramException as e:
                            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e.description}")
                    else:
                        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞! –ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Ç–∏ ¬´{network}¬ª.")
                ask_for_new_post(message)
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ VIP, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
                markup = types.InlineKeyboardMarkup()
                verify_button = types.InlineKeyboardButton(text="üõ†Ô∏è –ü—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é", url=VERIFICATION_LINK)
                markup.add(verify_button)
                bot.send_message(message.chat.id, "üîì –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º. –î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø—Ä–æ–π–¥–∏—Ç–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é:", reply_markup=markup)
        except telebot.apihelper.ApiTelegramException as e:
            bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ VIP-—Å—Ç–∞—Ç—É—Å–∞: {e.description}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
def ask_for_new_post(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("–î–∞", "–ù–µ—Ç")
    bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –µ—â—ë –æ–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?", reply_markup=markup)
    bot.register_next_step_handler(message, handle_new_post_choice)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ (–î–∞/–ù–µ—Ç)
def handle_new_post_choice(message):
    if message.text.lower() == "–¥–∞":
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
        bot.register_next_step_handler(message, process_text)
    else:
        bot.send_message(
            message.chat.id,
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞! üôå\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=get_main_keyboard()
        )

# –í–µ–±—Ö—É–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@app.route('/webhook', methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode('utf-8'))
    bot.process_new_updates([update])
    return 'ok', 200

# –ó–∞–ø—É—Å–∫ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
